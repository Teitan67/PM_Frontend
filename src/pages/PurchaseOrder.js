import React, { Component } from 'react'
import "../css/general-style.css"
import '../css/table-responsive.css'
import { BsCheckSquare, BsCartPlus } from "react-icons/bs";
import { AiTwotoneSave,AiOutlineCloseCircle,AiFillDelete } from "react-icons/ai"
import Catalogue from '../components/Catalogue';
import { OrderPDF } from '../components/OrderPDF';
import Swal from "sweetalert2";
import { getValueCookie } from '../services/cookieService';
import { create_Delete_Update_Information, getInformationWithData } from '../services/CABE';
import { getIndexElement } from '../functions/searchInObject';
import { confirmCloseAlert } from '../functions/alerts';
import ModalOrders from '../components/ModalComponent';
import { formatInputDateQuery, formatInputDateQuerytoInput } from '../functions/dateFormat';
import Select from 'react-select';
export default class PurchaseOrder extends Component {

    state = {

        purchaseOrderHeader:{
            NoOrder:'',
            Vendor:{},
            Carrier:'',
            orderDate:'',
            completionDate:'',
            creationDate:'',
            vendorNo:0,
            vendorName:'',
            comment:'',
            createBy:'',
            State:''
        },
        products: [],
        totals:{
            finalquantityTotal:0,
            finalTotalCost:0
        },
        disableHeader:true,
        secureTransaction:false,
        modalPurchase:false,
        oldPurchaseOrderHeader:[]
    }

    print() {
        console.log(this.state.products)
    }

    disableTransactions(){
        this.setState({secureTransaction:true})
    }

    enableTransactions(){
        this.setState({secureTransaction:false})
    }


    onTarget=async(e,item)=>{
        const temporal=this.state.products
        const ident=e.target.id.split('_')
        const index=temporal.indexOf(item)
        if(index!==-1){
            if(ident[0]==="BINPurchase"){
                temporal[index].BIN=e.target.value
                this.setState({products:temporal})
            }else if(ident[0]==="quantityPurchase"){
                temporal[index].quantity=Number(e.target.value)
                temporal[index].totalCost=Number(e.target.value)*temporal[index].unitPrice
                this.setState({products:temporal})
                this.calculateTotals()
            }
            
        }
        
    }
    onTargerHeader= async(e)=>{
        const varChange=e.target.id
        const temporal=this.state.purchaseOrderHeader
        if(varChange==="purchaseOrderNo"){
            await this.getPurchaseOrderHeader()
            const index=getIndexElement(this.state.oldPurchaseOrderHeader,"OrderNo",e.target.value)
            if(index===-1){
                temporal.NoOrder=e.target.value
                this.setState({purchaseOrderHeader:temporal})
            }else{
                confirmCloseAlert('incorrect',"The order number is already registered, select a different number or use the autogenerated one")
                await this.createNewPurchaseOrder()
            }
        }else if(varChange==="purchaseCarrier"){
            temporal.Carrier=e.target.value
            this.setState({purchaseOrderHeader:temporal})
        }else if(varChange==="purchaseVendor"){
            temporal.Vendor=e.target.value
            this.setState({purchaseOrderHeader:temporal})
        }else if(varChange==="purchaseDate"){
            temporal.orderDate=e.target.value
            this.setState({purchaseOrderHeader:temporal})
        }

       

    }

    async createNewPurchaseOrder(){
        this.disableTransactions()
        var data={
            idcompany:getValueCookie('CompanyId')
        }
        const noOrder=await getInformationWithData('/purchase/create/newOrderNumber',data)

        if(noOrder.status.code===1){
            var orderNumber="PO"
            for (let a =noOrder.data[0].NoOrder.toString().length ; a < 4; a++) {
                orderNumber+="0"
            }

            orderNumber+=noOrder.data[0].NoOrder.toString()

            const temporal=this.state.purchaseOrderHeader
            temporal.NoOrder=orderNumber
            this.setState({purchaseOrderHeader:temporal,disableHeader:false})
            document.getElementById('purchaseOrderNo').value=this.state.purchaseOrderHeader.NoOrder
        }


        this.enableTransactions()
    }

    async getPurchaseOrderHeader(){
        const data={
            idcompany:getValueCookie('CompanyId')
        }
        const result=await getInformationWithData('/purchase/get/purchaseOrderHeader',data)
        if(result.status.code===1){
            this.setState({oldPurchaseOrderHeader:result.data})
        }
    }

    async clearDashBoardPurchaseOrder(){
        
        var header={
            NoOrder:'',
            Vendor:{},
            Carrier:'',
            orderDate:'',
            completionDate:'',
            creationDate:'',
            vendorNo:0,
            vendorName:'',
            comment:'',
            createBy:'',
            State:''
        }
        var tot={
            finalquantityTotal:0,
            finalTotalCost:0
        }        
        this.setState({purchaseOrderHeader:header,products:[],totals:tot,disableHeader:true})
        this.defineHeader()                               
    }

    cancelPurchaseOrder(){
        this.disableTransactions()
        Swal.fire({
            title: 'Do you want to discard the actual Purchase Order?',
            backdrop:true,
            showDenyButton: true,
            confirmButtonText: 'Yes',
            denyButtonText: `No`,
            allowOutsideClick: () => !Swal.isLoading()
        }).then(async (result) => {
            if (result !== null && result !== undefined) {
                if (result.isConfirmed) {
                    await this.clearDashBoardPurchaseOrder()                  
                    Swal.fire('The Purchase Order was canceled!', '', 'info')
                } 
            }

        })
    this.enableTransactions()
    }
    stateInWords(state){
        
        if(state===''){
            return 'Creating order'
        }else if(state==='1'){
            return 'Order created'
        }else if(state==='2'){
            return 'Order received'
        }else if(state==='3'){
            return 'Order completed and loaded'
        }

    }
    colorStateText(state){
        
        if(state===''){
            return 'text-secondary'
        }else if(state==='1'){
            return 'text-primary'
        }else if(state==='2'){
            return 'text-warning'
        }else if(state==='3'){
            return 'text-success'
        }
    }




    async createPurchaseOrder(){
        this.disableTransactions()
        const temporal=this.state.purchaseOrderHeader
        temporal.State="1"
        this.setState({purchaseOrderHeader:temporal})
        const data={
            header:this.state.purchaseOrderHeader,
            products:this.state.products,
            idcompany:getValueCookie('CompanyId'),
            username:getValueCookie('userName'),
            cost:this.state.totals.finalTotalCost,
            totalquant:this.state.totals.finalquantityTotal,
            coment:''
        }
        const result=await create_Delete_Update_Information('/purchase/create/purchaseOrder',data)
        if(result.status.code===1){
            Swal.fire({
                title: 'Do you want to print the actual Purchase Order?',
                backdrop:true,
                showDenyButton: true,
                confirmButtonText: 'Yes',
                denyButtonText: `No`,
                allowOutsideClick: () => !Swal.isLoading()
            }).then(async (result) => {
                if (result !== null && result !== undefined) {
                    if (result.isConfirmed) {
                       
                    }else{
                        this.clearDashBoardPurchaseOrder()
                    } 
                }
    
            })
        }

        this.enableTransactions()
    }

    calculateTotals(){
        var totalquant=0
        var totalcost=0
        const temporal=this.state.products
        
        for (const item of temporal) {
           totalquant+=item.quantity
           totalcost+=item.totalCost 
        }
        const temporal2=this.state.totals
        temporal2.finalquantityTotal=totalquant
        temporal2.finalTotalCost=totalcost


        this.setState({totals:temporal2})
    }

     handleModalOpen = async () => {
        this.getPurchaseOrderHeader()
        await this.setState({ modalPurchase:true })
    }

    handleModalClose = () => {
       
        this.setState({ modalPurchase:false })
    }

    removeProduct(item){
        var temporal=this.state.products
        const index=temporal.indexOf(item)

        if(index!==-1){
            temporal.splice(index,1)
            console.log(temporal)
            for(let a=0;a<temporal.length;a++){
                document.getElementById("BINPurchase_"+a).value=temporal[a].BIN
                document.getElementById("quantityPurchase_"+a).value=temporal[a].quantity
            }


            this.setState({products:temporal})
            this.calculateTotals()
        }

    }

    async SelectOldPurchaseOrder(order){
        this.handleModalClose() 
        console.log(order)
        const data={
            NoOrder:order.OrderNo,
            idcompany:getValueCookie('CompanyId')
        }

        const temporal=this.state.purchaseOrderHeader
        temporal.Carrier=order.Carrier
        temporal.NoOrder=order.OrderNo
        temporal.completionDate=formatInputDateQuerytoInput(order.completionDate)
        temporal.orderDate=formatInputDateQuerytoInput(order.OrderDate)
        temporal.creationDate=formatInputDateQuerytoInput(order.CreationDate)
        temporal.comment=order.Comment
        temporal.State=order.Status
        temporal.createBy=order.createBy
        temporal.vendorNo=order.vendorNo
        temporal.vendorName=order.vendorName
        this.defineHeader()
        const detailData= await getInformationWithData('/purchase/get/purchaseOrderDetail',data)
        if(detailData.status.code===1){
            this.setState({purchaseOrderHeader:temporal,disableHeader:false})
            console.log(detailData.data)
        }
       

        
    }
    defineHeader(){
        const temporal=this.state.purchaseOrderHeader
        document.getElementById('purchaseOrderNo').value=temporal.NoOrder
        document.getElementById('purchaseCarrier').value=temporal.Carrier
        document.getElementById('purchaseVendor').value=temporal.vendorNo+"|"+temporal.vendorName
        document.getElementById('purchaseOrderDate').value=temporal.orderDate
        document.getElementById('purchaseCompletionDate').value=temporal.completionDate
        document.getElementById('purchaseComment').value=temporal.comment
    }


    render() {
        return (
            <div className='purchaseOrderContainer'>
                <button onClick={() => this.print()}>PRINT</button>
                <p className='text-center display-1 pb-2' >Purchase Order</p>

                <div>
                    <div className='row pb-5 text-center'>
                        <div className='col-1'></div>
                        <div className='col-5'>
                            <div className="d-grid gap-2">
                                <button type="button" className="btn greenButton btn-lg" disabled={this.state.secureTransaction} hidden={!this.state.disableHeader} onClick={()=>this.createNewPurchaseOrder()}>New Purchase Order <BsCartPlus /></button>
                                <button type="button" className="btn btn-secondary btn-lg" disabled={this.state.secureTransaction} hidden={this.state.disableHeader} onClick={()=>this.cancelPurchaseOrder()}>Cancel Purchase Order <AiFillDelete /></button>
                            </div>

                        </div>
                        <div className='col-5'>
                            <div className="d-grid gap-2">
                                <button type="button" className="btn brownButton btn-lg" disabled={this.state.secureTransaction||!this.state.disableHeader} onClick={()=>this.handleModalOpen()}>History <BsCheckSquare /></button>
                            </div>
                        </div>
                        <div className='col-1'></div>
                    </div>
                    <div className='row pb-2 text-center'>
                        <div className='col-1'></div>
                        <div className='col-10'>
                            <div className='row pb-2'>
                                <div className='col-6'>
                                    <div className='row pb-4'>
                                        <div className='col-12 text-start pText'><p>Order No:</p></div>
                                        <div className='col-12'><input className="form-control form-control-lg" id='purchaseOrderNo' type="text" onChange={this.onTargerHeader}/></div>
                                    </div>
                                    <div className='row pb-4'>
                                        <div className='col-12 text-start pText'><p>Carrier:</p></div>
                                        <div className='col-12'><input className="form-control form-control-lg" id='purchaseCarrier' type="text" onChange={this.onTargerHeader} /></div>
                                    </div>
                                    <div className='row pb-3'>
                                        <div className='col-12 text-start pText'><p>Comment:</p></div>
                                        <div className='col-12 textAreaGeneral'>
                                            <textarea className="form-control" id='purchaseComment' rows="4"></textarea>
                                        </div>
                                    </div>
                                    <div className='row pb-2'>
                                        <div className='col-4 text-start pText'><p>Order State:</p></div>
                                        <div className='col-8 text-start pText'><p className={'fw-bold '+this.colorStateText(this.state.purchaseOrderHeader.State)}>{this.stateInWords(this.state.purchaseOrderHeader.State)}</p></div>
                                    </div>
                                </div>
                                <div className='col-6'>
                                    <div className='row pb-2'>
                                        <div className='col-12 text-start pText'><p>Vendor:</p></div>
                                        <div className='col-12'>
                                            <Select className='fs-4 text-start' id='purchaseVendor' onChange={this.onTargerHeader} placeholder="Select Vendor"/>
                                        </div>
                                    </div>
                                    <div className='row pb-4'>
                                        <div className='col-12 text-start pText'><p>Date:</p></div>
                                        <div className='col-12'><input className="form-control form-control-lg" id='purchaseOrderDate' onChange={this.onTargerHeader} type="date" /></div>
                                    </div>
                                    <div className='row pb-4'>
                                        <div className='col-12 text-start pText'><p>Completion date:</p></div>
                                        <div className='col-12'><input className="form-control form-control-lg" id='purchaseCompletionDate' onChange={this.onTargerHeader} type="date" /></div>
                                    </div>
                                    <div className='row pb-2'>
                                        <div className='col-12'><Catalogue disabled={false} nombrePadre={"PurchaseOrder"} Padre={this} /></div>
                                    </div>

                                </div>

                            </div>
                        </div>
                        <div className='col-1'></div>
                    </div>
                    <div className='row pb-2 pt-3 text-center'>
                        <div className='col-12 pb-3 text-start display-6'>
                            <div className='row'>
                                <div className='col-1'></div>
                                <div className='col-10'>
                                    Order Detail:
                                </div>
                                <div className='col-1'></div>
                            </div>
                        </div>
                        <div className='col-12 tb-5'>
                            <table className='table'>
                                <thead className='thead'>
                                    <tr className='text-light text-center'>
                                        <th className='bg-dark'>Item Code</th>
                                        <th className='bg-dark'>Description</th>
                                        <th className='bg-dark'>BIN</th>
                                        <th className='bg-dark'>{(this.state.purchaseOrderHeader.State==="2"||this.state.purchaseOrderHeader.State==="3")?"Quantity Ordered":"Quantity"}</th>
                                        <th className='bg-dark' hidden={!(this.state.purchaseOrderHeader.State==="2"||this.state.purchaseOrderHeader.State==="3")}>Quantity Received</th>
                                        <th className='bg-dark'>Standar Cost</th>
                                        <th className='bg-dark'>Real Standar Cost</th>
                                        <th className='bg-dark'>Total Cost</th>
                                        <th className='bg-dark'></th>

                                    </tr>
                                </thead>
                                <tbody className='tbody'>
                                    {this.state.products.map((product, i) => (
                                        <tr className='text-center' key={i}>
                                            <td className='text-start'>{product.itemCode}</td>
                                            <td className='text-start'>{product.abbreviatedDesc}</td>
                                            <td>
                                                <div className="input-group input-group-lg">                     
                                                    <input type="text" id={'BINPurchase_'+i} defaultValue={product.BIN} className="form-control text-center" onChange={(e)=>this.onTarget(e,product)}/>
                                                </div>
                                            </td>
                                            <td>
                                            <div className="input-group input-group-lg">                              
                                                    <input type="number" id={'quantityPurchase_'+i} min={0} defaultValue={product.quantity} onChange={(e)=>this.onTarget(e,product)} className="form-control text-end"/>
                                                </div>
                                            </td>
                                            <td hidden={!(this.state.purchaseOrderHeader.State==="2"||this.state.purchaseOrderHeader.State==="3")}>
                                            <div className="input-group input-group-lg">                              
                                                    <input type="number" id={'quantityPurchase_'+i} min={0} defaultValue={product.quantity} onChange={(e)=>this.onTarget(e,product)} className="form-control text-end"/>
                                                </div>
                                            </td>
                                            <td className='text-end'>$ {product.unitPrice}</td>
                                            <td className='text-end'>$ {product.unitPrice}</td>
                                            <td className='text-end'>$ {product.totalCost}</td>
                                            <td><button onClick={()=>this.removeProduct(product)} className='btn btn-danger'><AiOutlineCloseCircle/></button></td>
                                        </tr>

                                    ))}
                                </tbody>
                                <tfoot className='tfoot'>

                                    <tr className='bg-secondary text-light'>
                                        <td></td>
                                        <td></td>
                                        <td>TOTAL:</td>
                                        <td className='text-end'>{this.state.totals.finalquantityTotal}</td>
                                        <td  hidden={!(this.state.purchaseOrderHeader.State==="2"||this.state.purchaseOrderHeader.State==="3")} className='text-end'>{/*Pending QuantityReceived*/0}</td>
                                        <td></td>
                                        <td></td>
                                        <td className='text-end'>$ {this.state.totals.finalTotalCost}</td>
                                        <td></td>
                                    </tr>
                                </tfoot>

                            </table>
                        </div>

                    </div>
                </div>

                <div className='row  pb-4 text-center'>
                    <div className='col-1'></div>
                    <div className='col-5'>
                        <div className="d-grid gap-2">
                            <button type="button" disabled={this.state.disableHeader||this.state.secureTransaction} className="btn yellowButton btn-lg" onClick={()=>this.createPurchaseOrder()}>Save Order <AiTwotoneSave /></button>
                        </div>
                    </div>
                    <div className='col-5'>
                        <OrderPDF disabled={this.state.disableHeader||this.state.secureTransaction} colorButton="orangeButton" title="Purchase Order Print"
                            companyLogo={getValueCookie('CompanyLogo')}
                            OrderTitle="Purchase Order"
                            contactInfo={["Hyperline Systems North East Inc.", "7055 Amwiler Industrial Drive Suite D, Atlanta, GA 30360", "Atlanta Georgia Warehouse", "www.hyperline.com"]}
                            OrderInfo1={["Order No: PO1563", "Vendor: HDMU HYUNDAI BANGKOK 0109E", "Carrier: Amazon UPS", "Date: 07/10/2022"]}
                            OrderInfo2={["Order State: In Proccess", "Order by: diego.perez", "Printed by: diego.perez"]}
                        />

                    </div>
                    <div className='col-1'></div>
                </div>
                <ModalOrders title={'Purchase Orders'} show={this.state.modalPurchase} close={()=>this.handleModalClose()}>
                    <div className='row pt-3'>
                    <div className='col-12'>
                            <table className='table'>
                                <thead className='thead'>
                                    <tr className='text-light text-center'>
                                        <th className='bg-dark'>Order No</th>
                                        <th className='bg-dark'>Order Date</th>
                                        <th className='bg-dark'>Comment</th>
                                        <th className='bg-dark'>Vendor</th>
                                        <th className='bg-dark'>Carrier</th>
                                        <th className='bg-dark'>Total Quantity</th>
                                        <th className='bg-dark'>Total Cost</th>
                                        <th className='bg-dark'>Status</th>
                                        <th className='bg-dark'>Create by</th>

                                    </tr>
                                </thead>
                                <tbody className='tbody'>
                                    {this.state.oldPurchaseOrderHeader.map((item,i)=>(
                                        <tr onClick={()=>this.SelectOldPurchaseOrder(item)} className='text-center' key={i}>
                                            <td>{item.OrderNo}</td>
                                            <td>{formatInputDateQuery(item.OrderDate)}</td>
                                            <td className='text-start'>{item.Comment}</td>
                                            <td>{item.VendorName}</td>
                                            <td>{item.Carrier}</td>
                                            <td className='text-end'>{item.TotalQuantity}</td>
                                            <td className='text-end'>$ {item.TotalCost}</td>
                                            <td className={''+this.colorStateText(item.Status)}>{this.stateInWords(item.Status)}</td>
                                            <td>{item.createBy}</td>
                                        </tr>
                                    ))}
                                   
                                </tbody>
                                <tfoot className='tfoot'>

                                    <tr className='bg-secondary text-light'>
                                    </tr>
                                </tfoot>

                            </table>
                        </div>
                    </div>
                </ModalOrders>

            </div>
        )
    }
}